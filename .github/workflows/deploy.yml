name: Deploy to Amazon EC2

on:
  push:
    branches:
      - sm-test
#      - main

# 설정된 환경 변수
env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: my-github-actions-s3-bucket-aucison
  CODE_DEPLOY_APPLICATION_NAME: my-codedeploy-app
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: my-codedeploy-deployment-group


permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      # (1) 기본 체크아웃
      - name: Checkout
        uses: actions/checkout@v3

      # (2) JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      #       tmp
      #      # (3-1) keystore.p12 파일 디코드
      #      - name: Decode keystore file
      #        run: echo "${{ secrets.KESTORE_P12_BASE64 }}" | base64 -d > keystore.p12


      # (3-2)keystore.p12 파일 디코드 후 적절한 위치로 이동
      #      - name: Move keystore file to resources
      #        run: mv keystore.p12 src/main/resources/

      # 환경 변수를 사용하여 application.yml 파일 생성 및 이동
      - name: Generate and Move application.yml
        run: |
          echo "spring:" > src/main/resources/application.yml
          echo "  elasticsearch:" >> src/main/resources/application.yml
          echo "    uris: \"http://localhost:9200\"" >> src/main/resources/application.yml
          echo "  jpa:" >> src/main/resources/application.yml
          echo "    database: mysql" >> src/main/resources/application.yml
          echo "    show-sql: 'true'" >> src/main/resources/application.yml
          echo "    hibernate:" >> src/main/resources/application.yml
          echo "      ddl-auto: update" >> src/main/resources/application.yml
          echo "    properties:" >> src/main/resources/application.yml
          echo "      hibernate:" >> src/main/resources/application.yml
          echo "        format_sql: true" >> src/main/resources/application.yml
          echo "  datasource:" >> src/main/resources/application.yml
          echo "    username: \${DATABASE_USERNAME}" >> src/main/resources/application.yml
          echo "    url: \${DATABASE_URL}" >> src/main/resources/application.yml
          echo "    password: \${DATABASE_PASSWORD}" >> src/main/resources/application.yml
          echo "  security:" >> src/main/resources/application.yml
          echo "    oauth2:" >> src/main/resources/application.yml
          echo "      client:" >> src/main/resources/application.yml
          echo "        registration:" >> src/main/resources/application.yml
          echo "          google:" >> src/main/resources/application.yml
          echo "            client-id: \${GOOGLE_CLIENTID}" >> src/main/resources/application.yml
          echo "            client-secret: \${GOOGLE_CLIENSECRET}" >> src/main/resources/application.yml
          echo "            redirect-uri: \${GOOGLE_REDIRECTURI}" >> src/main/resources/application.yml
          echo "            scope:" >> src/main/resources/application.yml
          echo "              - email" >> src/main/resources/application.yml
          echo "              - profile" >> src/main/resources/application.yml
          echo "jwt:" >> src/main/resources/application.yml
          echo "  secret: MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAKb/4snaHoUpcJJuEghayTVfy3w3EUg19ftxM524fbpFwZsF2YqHP1HlaDcAtLdvNSuQWHemq53+fyxnQCyAFiUCAwEAAQ==" >> src/main/resources/application.yml
          echo "  expiration: 2592000" >> src/main/resources/application.yml
          echo "logging:" >> src/main/resources/application.yml
          echo "  level:" >> src/main/resources/application.yml
          echo "    root: info" >> src/main/resources/application.yml
          echo "server:" >> src/main/resources/application.yml
          echo "  port: 9876" >> src/main/resources/application.yml
          echo "cloud:" >> src/main/resources/application.yml
          echo "  aws:" >> src/main/resources/application.yml
          echo "    stack:" >> src/main/resources/application.yml
          echo "      auto: false" >> src/main/resources/application.yml
          echo "    region:" >> src/main/resources/application.yml
          echo "      static: ap-northeast-2" >> src/main/resources/application.yml
          echo "    credentials:" >> src/main/resources/application.yml
          echo "      accessKey: \${IMG_AWS_ACCESSKEY}" >> src/main/resources/application.yml
          echo "      secretKey: \${IMG_AWS_SECRETKEY}" >> src/main/resources/application.yml
          echo "    s3:" >> src/main/resources/application.yml
          echo "      bucket: aucisonbucket" >> src/main/resources/application.yml


      # (4) Maven build (Test 제외)
      - name: Set Environment Variables and build with maven
        run: mvn clean package -DskipTests
        env:
          #          SSL_PASSWORD: ${{ secrets.SSL_PASSWORD }}  #tmp
          DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          GOOGLE_CLIENTID: ${{ secrets.GOOGLE_CLIENTID }}
          GOOGLE_CLIENSECRET: ${{ secrets.GOOGLE_CLIENSECRET }}
          GOOGLE_REDIRECTURI: ${{ secrets.GOOGLE_REDIRECTURI }}
          IMG_AWS_ACCESSKEY: ${{ secrets.IMG_AWS_ACCESSKEY }}
          IMG_AWS_SECRETKEY: ${{ secrets.IMG_AWS_SECRETKEY }}
#          JWT_SECRET: ${{ secrets.JWT_SECRET }}
      #        run: mvn clean package -DskipTests

#      #Test
#      - shell: bash
#        name: Secret Test
#        env:
#          #          SSL_PASSWORD: ${{ secrets.SSL_PASSWORD }}  #tmp
#          DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
#          DATABASE_URL: ${{ secrets.DATABASE_URL }}
#          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
#          GOOGLE_CLIENTID: ${{ secrets.GOOGLE_CLIENTID }}
#          GOOGLE_CLIENSECRET: ${{ secrets.GOOGLE_CLIENSECRET }}
#          GOOGLE_REDIRECTURI: ${{ secrets.GOOGLE_REDIRECTURI }}
#          IMG_AWS_ACCESSKEY: ${{ secrets.IMG_AWS_ACCESSKEY }}
#          IMG_AWS_SECRETKEY: ${{ secrets.IMG_AWS_SECRETKEY }}
##          JWT_SECRET: ${{ secrets.JWT_SECRET }}
#        run: |
#          if [ $DATABASE_USERNAME == admin ]; then echo "DATABASE_USERNAME is same"; else echo "DATABASE_USERNAME is not same"; fi
#          if [ $DATABASE_URL == aucison-db.cwwa1obel4ek.ap-northeast-2.rds.amazonaws.com ]; then echo "DATABASE_URL is same"; else echo "DATABASE_URL is not same"; fi
#          if [ $DATABASE_PASSWORD == aucison1234 ]; then echo "DATABASE_PASSWORD is same"; else echo "DATABASE_PASSWORD is not same"; fi
#          if [ $GOOGLE_CLIENTID == 76213274445-a48jff50a3frvb7s1urp6eog1ukdckj2.apps.googleusercontent.com ]; then echo "GOOGLE_CLIENTID is same"; else echo "GOOGLE_CLIENTID is not same"; fi
#          if [ $GOOGLE_CLIENSECRET == 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 ]; then echo "GOOGLE_CLIENSECRET is same"; else echo "GOOGLE_CLIENSECRET is not same"; fi
#          if [ $GOOGLE_REDIRECTURI == https://localhost:443/api/auth/google/callback ]; then echo "GOOGLE_REDIRECTURI is same"; else echo "GOOGLE_REDIRECTURI is not same"; fi
#          if [ $IMG_AWS_ACCESSKEY == AKIAQQVOQ57RBSDZXCPL ]; then echo "IMG_AWS_ACCESSKEY is same"; else echo "IMG_AWS_ACCESSKEY is not same"; fi
#          if [ $IMG_AWS_SECRETKEY == 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 ]; then echo "IMG_AWS_SECRETKEY is same"; else echo "IMG_AWS_SECRETKEY is not same"; fi
##          if [ $JWT_SECRET == MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAKb/4snaHoUpcJJuEghayTVfy3w3EUg19ftxM524fbpFwZsF2YqHP1HlaDcAtLdvNSuQWHemq53+fyxnQCyAFiUCAwEAAQ== ]; then echo "JWT_SECRET is same"; else echo "JWT_SECRET is not same"; fi


      # (5) AWS 인증
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # (6) 빌드 결과물과 appspec.yml을 포함하여 zip 파일 생성
      - name: Create deployment package
        run: zip -r deployment-package.zip target/* appspec.yml scripts/*

      # (7) zip 파일을 S3 버킷에 업로드
      - name: Upload deployment package to AWS S3
        run: aws s3 cp deployment-package.zip s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip

      # (8) S3 버킷에 있는 파일을 대상으로 CodeDeploy 실행
      - name: Deploy to AWS EC2 from S3
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
            --s3-location bucket=$S3_BUCKET_NAME,key=$GITHUB_SHA.zip,bundleType=zip